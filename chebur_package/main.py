import pyaudio
import json
import random
import time
import threading
from vosk import Model, KaldiRecognizer
import wave
import simpleaudio as sa


from chebur_package.yandex_gpt_search.yagpt_selenium import init_driver, ask_yandex_gpt
from chebur_package.speech_synthesis.tts_selenium import generate_speech

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = Model(r"STT_vosk/models_stt/vosk-model-small-ru-0.22")
recognizer = KaldiRecognizer(model, 16000)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
pa = pyaudio.PyAudio()
stream = pa.open(format=pyaudio.paInt16, channels=1, rate=16000, input=True, frames_per_buffer=8000)
stream.start_stream()

# –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç
KEYWORDS = ["—á–µ–±—É—Ä–∞—à–∫–∞"]

# –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
is_speaking = False
start_time = 0  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞

def play_audio(file_path):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ .wav
    """
    wave_obj = sa.WaveObject.from_wave_file(file_path)
    play_obj = wave_obj.play()
    play_obj.wait_done()


def play_audio_with_interrupt(file):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    global is_speaking, start_time
    is_speaking = True
    start_time = time.time()

    def play():
        global is_speaking
        if is_speaking:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            play_audio(file)
        is_speaking = False  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è

    thread = threading.Thread(target=play)
    thread.start()


# ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –û–¢–î–ï–õ–¨–ù–û–ú –ø–æ—Ç–æ–∫–µ
driver = None
driver_ready = threading.Event()  # –§–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä–∞


def start_driver():
    global driver
    driver = init_driver(headless=True)
    driver_ready.set()  # –°–æ–æ–±—â–∞–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –≥–æ—Ç–æ–≤


threading.Thread(target=start_driver, daemon=True).start()  # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞


def find_and_speak(text):
    wait_phrases = [
        "../chebur_package/STT_vosk/phrase/wait1.wav",
        "../chebur_package/STT_vosk/phrase/wait2.wav",
        "../chebur_package/STT_vosk/phrase/wait3.wav"
    ]
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–∑–≤—É—á–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=play_audio, args=(random.choice(wait_phrases),), daemon=True).start()

    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '–Ω–∞–π–¥–∏'"""
    text = text+" P.S. –æ—Ç–≤–µ—Ç—å –ø–æ —Ä—É—Å—Å–∫–∏ –æ–¥–Ω–∏–º –∞–±–∑–∞—Ü–µ–º –º–∞–∫—Å–∏–º—É–º –Ω–∞ 150 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ –µ—Å–ª–∏ –¥–æ P.S. –ø–µ—Ä–µ–¥–∞–Ω–∞ –±–µ—Å—Å–º—ã—Å–ª–∏—Ü–∞, —Ç–æ –æ—Ç–≤–µ—Ç—å, —á—Ç–æ –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å–∞, –∫ —Ç–µ–±–µ –º–æ–≥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è —á–µ–±—É—Ä–∞—à–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ –Ω–µ –±—Ä–µ–¥ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    driver_ready.wait()  # ‚è≥ –ñ–¥—ë–º, –ø–æ–∫–∞ –±—Ä–∞—É–∑–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    response = ask_yandex_gpt(driver, text )

    if response:
        generate_speech(response)  # üîä –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º
    else:
        play_audio_with_interrupt("../chebur_package/STT_vosk/phrase/sorri.wav")  # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º "–Ω–µ –ø–æ–Ω—è–ª"


# –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
COMMANDS = {
    ("—Ä–∞—Å—Å–∫–∞–∂–∏", "—Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫"): lambda: play_audio('../chebur_package/STT_vosk/phrase/techno.wav'),
    ("—Ä–∞—Å—Å–∫–∞–∂–∏", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "—Ç–µ—Ö–Ω–æ–ø–∞—Ä–∫"): lambda: play_audio('../chebur_package/STT_vosk/phrase/techno.wav'),
    ("—Ä–∞—Å—Å–∫–∞–∂–∏", "–∞—É–¥–∏—Ç–æ—Ä", "–µ–ª—å—Ü–∏–Ω"): lambda: play_audio('../chebur_package/STT_vosk/phrase/elcin.wav'),
    ("–≥–¥–µ", "—Å—Ç–æ–ª–æ–≤–∞—è"): lambda: play_audio('../chebur_package/STT_vosk/phrase/canteen.wav'),
    ("–Ω–∞–π–¥–∏",): find_and_speak,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    ("—Ä–∞—Å—Å–∫–∞–∂–∏",): find_and_speak,
    ("—á—Ç–æ",): find_and_speak,
    ("–∫—Ç–æ",): find_and_speak,
    ("—É–∑–Ω–∞–π",): find_and_speak,
    ("–ø–æ—á–µ–º—É",): find_and_speak,
    ("—Å–∫–æ–ª—å–∫–æ",): find_and_speak,
    ("–∫–∞–∫",): find_and_speak,
    ("–æ–±—ä—è—Å–Ω–∏",): find_and_speak,
    ("–∑–∞—á–µ–º",): find_and_speak,
    ("–≥–¥–µ",): find_and_speak,
    ("–∫–æ–≥–¥–∞",): find_and_speak,
    ("—Ä–∞—Å—Å–∫–∞–∂–∏", "–∞–Ω–µ–∫–¥–æ—Ç"): lambda: play_audio('../chebur_package/STT_vosk/phrase/anekdot1.wav'),
}

while True:
    data = stream.read(4000, exception_on_overflow=False)
    if recognizer.AcceptWaveform(data):
        result = json.loads(recognizer.Result())
        text = result["text"]

        if any(keyword in text for keyword in KEYWORDS):  # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "–ß–µ–±—É—Ä–∞—à–∫–∞"
            words = text.split()  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞

            if len(words) == 1 and words[0] in KEYWORDS:  # –ï—Å–ª–∏ —Å–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ "–ß–µ–±—É—Ä–∞—à–∫–∞"
                print("–Ø —Å–ª—É—à–∞—é –≤–∞—Å!")

                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                audio_files = ["../chebur_package/STT_vosk/phrase/hello1.wav",
                               "../chebur_package/STT_vosk/phrase/hello2.wav",
                               "../chebur_package/STT_vosk/phrase/hello3.wav"]
                play_audio_with_interrupt(random.choice(audio_files))

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
                while True:
                    data = stream.read(4000, exception_on_overflow=False)
                    if recognizer.AcceptWaveform(data):
                        result = json.loads(recognizer.Result())
                        text = result["text"]
                        break  # –ü–æ–ª—É—á–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –±—ã–ª–æ –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ "–ß–µ–±—É—Ä–∞—à–∫–∞", –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ä–∞–∑—É)
            found_command = False
            for command, action in COMMANDS.items():
                if all(word in text for word in command):
                    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command}")  # ‚úÖ –î–æ–±–∞–≤–∏–ª print
                    if is_speaking and (time.time() - start_time < 5):
                        is_speaking = False
                        print("–ü—Ä–µ—Ä—ã–≤–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...")

                    if command in [("–Ω–∞–π–¥–∏",), ("—Ä–∞—Å—Å–∫–∞–∂–∏",), ("—á—Ç–æ",), ("–∫—Ç–æ",), ("—É–∑–Ω–∞–π",), ("–ø–æ—á–µ–º—É",), ("—Å–∫–æ–ª—å–∫–æ",),
                                   ("–∫–∞–∫",), ("–æ–±—ä—è—Å–Ω–∏",), ("–∑–∞—á–µ–º",), ("–≥–¥–µ",), ("–∫–æ–≥–¥–∞",)]:
                        action(text)
                    else:
                        action()

                    found_command = True
                    break

            if not found_command:
                print(f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: {text}")  # ‚úÖ –î–æ–±–∞–≤–∏–ª print
                play_audio_with_interrupt('../chebur_package/STT_vosk/phrase/sorri.wav')

